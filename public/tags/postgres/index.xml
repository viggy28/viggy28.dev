<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgres on Home</title>
    <link>https://viggy28.dev/tags/postgres/</link>
    <description>Recent content in postgres on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 May 2021 20:00:08 -0400</lastBuildDate><atom:link href="https://viggy28.dev/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding libpq in Postgres, Debian and Go</title>
      <link>https://viggy28.dev/article/libpq-postgres-go/</link>
      <pubDate>Wed, 05 May 2021 20:00:08 -0400</pubDate>
      
      <guid>https://viggy28.dev/article/libpq-postgres-go/</guid>
      <description>Libpq-Postgres-Go After I started working on Postgres, I have heard this term libpq enough times, but never had a good grasp of it. After digging around this topic for a couple of days, here is my understanding.
From the Postgres doc https://www.postgresql.org/docs/9.5/libpq.html,
 libpq is the C application programmer&amp;rsquo;s interface to PostgreSQL. libpq is a set of library functions that allow client programs to pass queries to the PostgreSQL backend server and to receive the results of these queries</description>
    </item>
    
    <item>
      <title>go context</title>
      <link>https://viggy28.dev/gopostgres/go-context/</link>
      <pubDate>Fri, 02 Oct 2020 11:00:08 -0400</pubDate>
      
      <guid>https://viggy28.dev/gopostgres/go-context/</guid>
      <description>Understanding context in Golang through Postgres I was trying to learn Go package context especially with respect to Postgres. On a very high level context provides context to the operation. Yeah, I agree, the previous statement doesn&amp;rsquo;t really add much value, but hold on I don&amp;rsquo;t really know how to explain it, rather let&amp;rsquo;s go over some code. Sometimes its easier to understand by seeing it in action :)
The complete program is here</description>
    </item>
    
    <item>
      <title>Part 2/2: How to set up HAProxy for an active-active postgres databases</title>
      <link>https://viggy28.dev/article/postgres-haproxy/</link>
      <pubDate>Sat, 06 Apr 2019 18:00:00 +0000</pubDate>
      
      <guid>https://viggy28.dev/article/postgres-haproxy/</guid>
      <description>Step 1: Setting up HAProxy I hope you gone through [Part1] (https://viggy28.dev/article/postgres-active-active-replication/) of this series. Perhaps, one thing you might have noticed is that I&amp;rsquo;ve to connect to the specific master database. In our case, since both the databases are running on docker, only the localhost port is different. (In a production environment, most likely you going to run the databases on a different host). The main reason for active-active replication is high availability.</description>
    </item>
    
    <item>
      <title>Part 1/2: How to set up active-active replication in postgres using BDR</title>
      <link>https://viggy28.dev/article/postgres-active-active-replication/</link>
      <pubDate>Fri, 05 Apr 2019 19:00:00 +0000</pubDate>
      
      <guid>https://viggy28.dev/article/postgres-active-active-replication/</guid>
      <description>Postgres doesn&amp;rsquo;t support active-active replication natively. As of this writing, we have to rely on 3rd party tools. I decided to go with [BDR] (https://www.2ndquadrant.com/en/resources/postgres-bdr-2ndquadrant/).
I didn&amp;rsquo;t want to spin up multiple VMs. So, the obvious choice is docker. Make sure you have docker on mac &amp;amp; docker compose.
Step1: Running 2 Postgres instances using docker container Thanks to [jgiannuzzi] (https://github.com/jgiannuzzi), who created a docker [image] (https://hub.docker.com/r/jgiannuzzi/postgres-bdr) with Postgres and BDR.</description>
    </item>
    
  </channel>
</rss>
