<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Home</title>
    <link>https://viggy28.dev/tags/docker/</link>
    <description>Recent content in Docker on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Apr 2019 19:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://viggy28.dev/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Part 1/2: How to set up active-active replication in postgres using BDR</title>
      <link>https://viggy28.dev/article/postgres-active-active-replication/</link>
      <pubDate>Fri, 05 Apr 2019 19:00:00 +0000</pubDate>
      
      <guid>https://viggy28.dev/article/postgres-active-active-replication/</guid>
      <description>Postgres doesn&amp;rsquo;t support active-active replication natively. As of this writing, we have to rely on 3rd party tools. I decided to go with BDR.
I didn&amp;rsquo;t want to spin up multiple VMs. So, the obvious choice is docker. Make sure you have docker on mac &amp;amp; docker compose.
Step1: Running 2 Postgres instances using docker container Thanks to jgiannuzzi. He created a docker image with Postgres and BDR.
docker-compose.yml file content</description>
    </item>
    
    <item>
      <title>Part 2/2: How to set up HAProxy infront of active-active replication in postgres</title>
      <link>https://viggy28.dev/article/postgres-haproxy/</link>
      <pubDate>Fri, 05 Apr 2019 19:00:00 +0000</pubDate>
      
      <guid>https://viggy28.dev/article/postgres-haproxy/</guid>
      <description>I hope you gone through Part1 of this series. Perhaps, one thing you might have noticed is that I&amp;rsquo;ve to connect to the specific master database. In our case, since both the databases are running on docker, only the localhost port is different. (In production environment, most likely you going to run the databases on different host). The main reason for active-active replication is high availability. If one of the node goes down, you still want your application to behave normally.</description>
    </item>
    
    <item>
      <title>How to dockerize a python application</title>
      <link>https://viggy28.dev/article/dockererize-python-application/</link>
      <pubDate>Sat, 23 Sep 2017 18:00:08 -0400</pubDate>
      
      <guid>https://viggy28.dev/article/dockererize-python-application/</guid>
      <description>In this article we will see how to convert a simple python application to a containerized (Docker) one Go to the profile of vignesh ravichandran vignesh ravichandran Sep 23, 2017 TL;DR -&amp;gt; Containerize a python app. Push the image and execute from Google Cloud.
On a leisurely Saturday afternoon, I thought its nice to play with containers. I was fascinated with the idea of containerizing an app and running it across different environments.</description>
    </item>
    
  </channel>
</rss>